from sklearn.model_selection import train_test_split

X = iris.data
y = iris.target

# (80:20)으로 분할한다.
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=4)

print(X_train.shape)
print(X_test.shape)

// 훈련 데이터와 테스트 데이터 분리


from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=6)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
from sklearn import metrics

scores = metrics.accuracy_score(y_test, y_pred)
classes = {0:'setosa',1:'versicolor',2:'virginica’}

# 전혀 보지 못한 새로운 데이터를 제시해보자.
x_new = [[3,4,5,2],  [5,4,2,2]]

y_predict = knn.predict(x_new)

print(classes[y_predict[0]])
print(classes[y_predict[1]])

//kNN
import matplotlib.pyplot as plt
from sklearn import datasets, metrics
from sklearn.model_selection import train_test_split


digits = datasets.load_digits()
plt.imshow(digits.images[0], cmap=plt.cm.gray_r, interpolation='nearest')
n_samples = len(digits.images)

data = digits.images.reshape((n_samples, -1))  # reshape 인수가 -1 이면, 데이터 개수 만큼의 차원 만들어짐  
X_train, X_test, y_train, y_test = train_test_split(
		data, digits.target, test_size=0.2)
    
// 필기체 숫자를 분류해보자

